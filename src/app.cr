require "kemal"
require "crest"

HOST                = ENV["HOST"]?.try(&.to_s) || "0.0.0.0"
PORT                = ENV["PORT"]?.try(&.to_i) || 8080
NOTION_ENDPOINT     = ENV["NOTION_ENDPOINT"]?.try(&.to_s) || "https://api.notion.com/v1/search"
NOTION_API_VERSION  = ENV["NOTION_API_VERSION"]?.try(&.to_s) || "2021-05-13"
NOTION_API_KEY      = ENV["NOTION_API_KEY"]?.try(&.to_s) || ""
ROCKET_SECRET_TOKEN = ENV["ROCKET_SECRET_TOKEN"]?.try(&.to_s) || ""

# Configuration
Kemal.config.port = PORT
Kemal.config.env = "production"
serve_static false

before_all "/" do |env|
  env.response.content_type = "application/json"
end

post "/" do |env|
  begin
    body = env.params.json["body"].as(Hash(String, JSON::Any))

    if check_rocket_token(body["token"], ROCKET_SECRET_TOKEN)
      Log.info { "An unauthorized access has been recorded from #{env.request.remote_address} with #{body["token"]}" }
      env.response.respond_with_status(HTTP::Status::UNAUTHORIZED, "Unauthorized access detected")
    else
      Log.info { "Request from #{env.request.remote_address}" }
      request = search_in_notion(body["text"])
      request.body
    end
  rescue ex : JSON::ParseException
    Log.info { "Request from #{env.request.remote_address} - Body parsing error" }
    env.response.respond_with_status(HTTP::Status::INTERNAL_SERVER_ERROR, "Internal server error : Ensure your body request is correct")
  rescue
    Log.error { "Unknown error generated by address : #{env.request.remote_address}" }
    Log.error { env.params.json }
    env.response.respond_with_status(HTTP::Status::INTERNAL_SERVER_ERROR, "Internal server error : Unknown error happened. Technical team has been contacted")
  end
end

def check_rocket_token(params_token, env_token)
  params_token != env_token
end

def search_in_notion(text)
  begin
    Crest::Request.execute(:post,
      NOTION_ENDPOINT,
      headers: {
        "Content-Type"   => "application/json",
        "Notion-Version" => NOTION_API_VERSION,
        "Authorization"  => NOTION_API_KEY,
      },
      form: {
        "query" => text,
        "sort":    {
          "direction" => "ascending",
          "timestamp" => "last_edited_time",
        },
      }.to_json
    )
  rescue ex : Crest::NotFound | Crest::Unauthorized
    ex.response
  end
end

Kemal.run do |config|
  server = config.server.not_nil!
  server.bind_tcp HOST, PORT, reuse_port: true
end
