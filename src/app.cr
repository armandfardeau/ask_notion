require "kemal"
require "crest"
require "./config"

module Asknotion
  # Configuration
  Kemal.config.env = "production"
  serve_static false

  before_all "/" do |env|
    env.response.content_type = "application/json"
  end

  post "/" do |env|
    begin
      body = env.params.json["body"].as(Hash(String, JSON::Any))

      if check_rocket_token(body["token"], Configs::ROCKET_SECRET_TOKEN)
        Log.info { "An unauthorized access has been recorded from #{env.request.remote_address} with #{body["token"]}" }
        env.response.respond_with_status(HTTP::Status::UNAUTHORIZED, "Unauthorized access detected")
      else
        Log.info { "Request from #{env.request.remote_address}" }
        request = search_in_notion(body["text"])
        request.body
      end
    rescue ex : JSON::ParseException
      Log.info { "Request from #{env.request.remote_address} - Body parsing error" }
      env.response.respond_with_status(HTTP::Status::INTERNAL_SERVER_ERROR, "Internal server error : Ensure your body request is correct")
    rescue
      Log.error { "Unknown error generated by address : #{env.request.remote_address}" }
      Log.error { env.params.json }
      env.response.respond_with_status(HTTP::Status::INTERNAL_SERVER_ERROR, "Internal server error : Unknown error happened. Technical team has been contacted")
    end
  end

  def self.check_rocket_token(params_token, env_token)
    params_token != env_token
  end

  def self.search_in_notion(text)
    begin
      Crest::Request.execute(:post,
        Configs::NOTION_ENDPOINT,
        headers: {
          "Content-Type"   => "application/json",
          "Notion-Version" => Configs::NOTION_API_VERSION,
          "Authorization"  => Configs::NOTION_API_KEY,
        },
        form: {
          "query" => text,
          "sort":    {
            "direction" => "ascending",
            "timestamp" => "last_edited_time",
          },
        }.to_json
      )
    rescue ex : Crest::NotFound | Crest::Unauthorized
      ex.response
    end
  end
end

Kemal.run do |config|
  server = config.server.not_nil!
  server.bind_tcp Asknotion::Configs::HOST, Asknotion::Configs::PORT, reuse_port: true
end
